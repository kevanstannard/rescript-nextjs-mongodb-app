// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Component_Icon from "./Component_Icon.mjs";

function getDisabled(state) {
  return state !== "Ready";
}

function getContent(state, children) {
  if (state === "Ready" || state === "Disabled") {
    return children;
  } else {
    return React.createElement(Component_Icon.ProgressSpin.make, {
                color: "White"
              });
  }
}

function getColor(style, state) {
  if (style === "Red") {
    if (state === "Disabled" || state !== "Ready") {
      return "bg-gray-300";
    } else {
      return "bg-red-500 hover:bg-red-400";
    }
  } else if (style === "Blue") {
    if (state === "Disabled" || state !== "Ready") {
      return "bg-gray-300";
    } else {
      return "bg-blue-500 hover:bg-blue-400";
    }
  } else if (style === "Green") {
    if (state === "Disabled" || state !== "Ready") {
      return "bg-gray-300";
    } else {
      return "bg-green-500 hover:bg-green-400";
    }
  } else if (style === "Gray") {
    if (state === "Disabled" || state !== "Ready") {
      return "bg-gray-200";
    } else {
      return "bg-gray-500 hover:bg-gray-400";
    }
  } else if (style === "None") {
    return "bg-transparent";
  } else if (state === "Disabled" || state !== "Ready") {
    return "bg-gray-200";
  } else {
    return "bg-gray-400 hover:bg-gray-300";
  }
}

function getSize(size) {
  if (size === "Base") {
    return "text-base py-4 px-6";
  } else {
    return "text-sm py-2 px-4";
  }
}

function getFull(full) {
  if (full) {
    return "w-full";
  } else {
    return "";
  }
}

function className(state, color, size, full) {
  return "text-white text-center font-semibold rounded " + getSize(size) + " " + getColor(color, state) + " " + (
          full ? "w-full" : ""
        );
}

var Styles = {
  getColor: getColor,
  getSize: getSize,
  getFull: getFull,
  className: className
};

function Component_Button$Button(Props) {
  var state = Props.state;
  var onClick = Props.onClick;
  var colorOpt = Props.color;
  var sizeOpt = Props.size;
  var fullOpt = Props.full;
  var titleOpt = Props.title;
  var children = Props.children;
  var color = colorOpt !== undefined ? colorOpt : "Gray";
  var size = sizeOpt !== undefined ? sizeOpt : "Base";
  var full = fullOpt !== undefined ? fullOpt : false;
  var title = titleOpt !== undefined ? titleOpt : "";
  var className$1 = className(state, color, size, full);
  return React.createElement("button", {
              className: className$1,
              title: title,
              disabled: state !== "Ready",
              type: "button",
              onClick: onClick
            }, getContent(state, children));
}

var Button = {
  make: Component_Button$Button
};

function makeIcon(icon) {
  if (icon === "ChevronDown") {
    return React.createElement(Component_Icon.ChevronDown.make, {
                color: "White"
              });
  } else if (icon === "ChevronUp") {
    return React.createElement(Component_Icon.ChevronUp.make, {
                color: "White"
              });
  } else if (icon === "X") {
    return React.createElement(Component_Icon.X.make, {
                color: "White"
              });
  } else if (icon === "ChevronDoubleUp") {
    return React.createElement(Component_Icon.ChevronDoubleUp.make, {
                color: "White"
              });
  } else if (icon === "Trash") {
    return React.createElement(Component_Icon.Trash.make, {
                color: "White"
              });
  } else if (icon === "Menu") {
    return React.createElement(Component_Icon.Menu.make, {
                color: "White"
              });
  } else {
    return React.createElement(Component_Icon.ChevronDoubleDown.make, {
                color: "White"
              });
  }
}

function Component_Button$IconButton(Props) {
  var title = Props.title;
  var onClick = Props.onClick;
  var icon = Props.icon;
  var color = Props.color;
  var state = Props.state;
  return React.createElement(Component_Button$Button, {
              state: state,
              onClick: onClick,
              color: color,
              size: "Small",
              title: title,
              children: makeIcon(icon)
            });
}

var IconButton = {
  Icon: undefined,
  makeIcon: makeIcon,
  make: Component_Button$IconButton
};

export {
  getDisabled ,
  getContent ,
  Styles ,
  Button ,
  IconButton ,
  
}
/* react Not a pure module */
