// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Dom2 from "../bindings/Dom2.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Component_Icon from "./Component_Icon.mjs";
import * as Component_ReCaptcha from "./Component_ReCaptcha.mjs";
import * as Component_ButtonStyles from "./Component_ButtonStyles.mjs";
import * as Component_PasswordStrength from "./Component_PasswordStrength.mjs";

function Component_Form$FormContainer(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "w-full md:w-3/4 lg:w-1/2 overflow-x-hidden"
            }, children);
}

var FormContainer = {
  make: Component_Form$FormContainer
};

function Component_Form$FieldErrorMessage(Props) {
  var text = Props.text;
  return React.createElement("div", {
              className: "text-red-500 pt-2"
            }, text);
}

var FieldErrorMessage = {
  make: Component_Form$FieldErrorMessage
};

function Component_Form$FieldHint(Props) {
  var text = Props.text;
  if (text !== undefined) {
    return React.createElement("div", {
                className: "text-gray-500 text-sm mb-1"
              }, text);
  } else {
    return null;
  }
}

var FieldHint = {
  make: Component_Form$FieldHint
};

function inputTypeAsString(type_) {
  if (type_ === "Text") {
    return "text";
  } else {
    return "email";
  }
}

function Component_Form$InputField(Props) {
  var type_ = Props.type_;
  var label = Props.label;
  var value = Props.value;
  var onChange = Props.onChange;
  var error = Props.error;
  var hint = Props.hint;
  return React.createElement("div", {
              className: "mb-6"
            }, React.createElement("label", {
                  className: "block mb-1"
                }, React.createElement("div", {
                      className: "font-bold"
                    }, label), React.createElement(Component_Form$FieldHint, {
                      text: hint
                    }), React.createElement("input", {
                      className: "bg-gray-100 border border-gray-300 p-2 w-full",
                      type: inputTypeAsString(type_),
                      value: value,
                      onChange: (function ($$event) {
                          return Curry._1(onChange, $$event.target.value);
                        })
                    }), error !== undefined ? React.createElement(Component_Form$FieldErrorMessage, {
                        text: error
                      }) : null));
}

var InputField = {
  inputTypeAsString: inputTypeAsString,
  make: Component_Form$InputField
};

function Component_Form$TextField(Props) {
  var label = Props.label;
  var value = Props.value;
  var onChange = Props.onChange;
  var error = Props.error;
  var hint = Props.hint;
  return React.createElement(Component_Form$InputField, {
              type_: "Text",
              label: label,
              value: value,
              onChange: onChange,
              error: error,
              hint: hint
            });
}

var TextField = {
  make: Component_Form$TextField
};

function Component_Form$EmailField(Props) {
  var label = Props.label;
  var value = Props.value;
  var onChange = Props.onChange;
  var error = Props.error;
  var hint = Props.hint;
  return React.createElement(Component_Form$InputField, {
              type_: "Email",
              label: label,
              value: value,
              onChange: onChange,
              error: error,
              hint: hint
            });
}

var EmailField = {
  make: Component_Form$EmailField
};

function Component_Form$PasswordField(Props) {
  var label = Props.label;
  var value = Props.value;
  var onChange = Props.onChange;
  var error = Props.error;
  var showPasswordStrength = Props.showPasswordStrength;
  var match = React.useState(function () {
        return false;
      });
  var setShowPassword = match[1];
  var showPassword = match[0];
  return React.createElement("div", {
              className: "mb-6"
            }, React.createElement("button", {
                  className: "float-right",
                  tabIndex: -1,
                  type: "button",
                  onClick: (function (_event) {
                      return Curry._1(setShowPassword, (function (param) {
                                    return !showPassword;
                                  }));
                    })
                }, showPassword ? React.createElement(Component_Icon.EyeOff.make, {}) : React.createElement(Component_Icon.Eye.make, {})), React.createElement("label", {
                  className: "block mb-1"
                }, React.createElement("div", {
                      className: "font-bold"
                    }, label), React.createElement("input", {
                      className: "bg-gray-100 border border-gray-300 p-2 mb-1 w-full",
                      type: showPassword ? "text" : "password",
                      value: value,
                      onChange: (function ($$event) {
                          return Curry._1(onChange, $$event.target.value);
                        })
                    }), showPasswordStrength ? React.createElement(Component_PasswordStrength.make, {
                        password: value
                      }) : null, error !== undefined ? React.createElement(Component_Form$FieldErrorMessage, {
                        text: error
                      }) : null));
}

var PasswordField = {
  make: Component_Form$PasswordField
};

function Component_Form$CheckboxField(Props) {
  var label = Props.label;
  return React.createElement("div", {
              className: "mb-6"
            }, React.createElement("label", {
                  className: "block"
                }, React.createElement("input", {
                      className: "mr-2",
                      type: "checkbox"
                    }), label));
}

var CheckboxField = {
  make: Component_Form$CheckboxField
};

function Component_Form$TextAreaField(Props) {
  var label = Props.label;
  var hint = Props.hint;
  var value = Props.value;
  var onChange = Props.onChange;
  var error = Props.error;
  return React.createElement("div", {
              className: "mb-6"
            }, React.createElement("label", {
                  className: "block mb-1"
                }, React.createElement("div", {
                      className: "font-bold"
                    }, label), React.createElement(Component_Form$FieldHint, {
                      text: hint
                    }), React.createElement("textarea", {
                      className: "bg-gray-100 border border-gray-300 p-2 w-full h-40",
                      value: value,
                      onChange: (function ($$event) {
                          return Curry._1(onChange, $$event.target.value);
                        })
                    }), error !== undefined ? React.createElement(Component_Form$FieldErrorMessage, {
                        text: error
                      }) : null));
}

var TextAreaField = {
  make: Component_Form$TextAreaField
};

function Component_Form$ReCaptchaField(Props) {
  var reCaptchaSiteKey = Props.reCaptchaSiteKey;
  var onChange = Props.onChange;
  var error = Props.error;
  return React.createElement("div", {
              className: "mb-7"
            }, React.createElement(Component_ReCaptcha.make, {
                  reCaptchaSiteKey: reCaptchaSiteKey,
                  onChange: onChange
                }), error !== undefined ? React.createElement(Component_Form$FieldErrorMessage, {
                    text: error
                  }) : null);
}

var ReCaptchaField = {
  make: Component_Form$ReCaptchaField
};

function getFile($$event) {
  var fileList = Dom2.$$Event.currentTargetFiles($$event);
  if (fileList.length === 1) {
    return Caml_option.some(fileList.item(0));
  }
  
}

function readFileAsDataUrl(file, callback) {
  var reader = new FileReader();
  reader.addEventListener("load", (function (param) {
          return Curry._1(callback, reader.result);
        }), false);
  reader.readAsDataURL(file);
  
}

function clearInput(inputRef) {
  var inputEl = inputRef.current;
  if (!(inputEl == null)) {
    inputEl.value = "";
    return ;
  }
  
}

function Component_Form$ImageFileButton(Props) {
  var accept = Props.accept;
  var label = Props.label;
  var onChange = Props.onChange;
  var className = Component_ButtonStyles.makeClassName("Ready", "Gray", "Base", false) + " inline-block cursor-pointer mb-6";
  var inputRef = React.useRef(null);
  return React.createElement("label", {
              className: className
            }, label, React.createElement("input", {
                  ref: inputRef,
                  className: "hidden",
                  accept: accept,
                  type: "file",
                  onChange: (function ($$event) {
                      var file = getFile($$event);
                      if (file === undefined) {
                        return Curry._1(onChange, undefined);
                      }
                      var file$1 = Caml_option.valFromOption(file);
                      return readFileAsDataUrl(file$1, (function (dataUrl) {
                                    var image = new Image();
                                    image.addEventListener("load", (function (_event) {
                                            Curry._1(onChange, [
                                                  file$1,
                                                  image,
                                                  dataUrl
                                                ]);
                                            return clearInput(inputRef);
                                          }));
                                    image.addEventListener("error", (function (_event) {
                                            Curry._1(onChange, undefined);
                                            return clearInput(inputRef);
                                          }));
                                    image.src = dataUrl;
                                    
                                  }));
                    })
                }));
}

var ImageFileButton = {
  getFile: getFile,
  readFileAsDataUrl: readFileAsDataUrl,
  clearInput: clearInput,
  make: Component_Form$ImageFileButton
};

var Icon;

var ButtonStyles;

var PasswordStrength;

export {
  Icon ,
  ButtonStyles ,
  PasswordStrength ,
  FormContainer ,
  FieldErrorMessage ,
  FieldHint ,
  InputField ,
  TextField ,
  EmailField ,
  PasswordField ,
  CheckboxField ,
  TextAreaField ,
  ReCaptchaField ,
  ImageFileButton ,
  
}
/* react Not a pure module */
