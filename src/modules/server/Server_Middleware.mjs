// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as MongoDb from "../../bindings/MongoDb.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Server_User from "./Server_User.mjs";
import * as Server_Mongo from "./Server_Mongo.mjs";
import * as NextConnect from "next-connect";
import * as Server_Config from "./Server_Config.mjs";
import * as Server_NodeEnv from "./Server_NodeEnv.mjs";
import * as Server_Request from "./Server_Request.mjs";
import * as Server_Session from "./Server_Session.mjs";
import * as NextIronSession from "next-iron-session";

function getBody(req) {
  return Caml_option.nullable_to_opt(req.body);
}

var NextRequest = {
  getBody: getBody
};

var key = "mongodb";

function setClient(req, value) {
  req[key] = value;
  
}

function getClient(req) {
  return req[key];
}

function middlewareAsync(param, req, _res, next) {
  var config = Server_Config.get(undefined);
  return Server_Mongo.connect(config.mongoDb).then(function (client) {
                setClient(req, client);
                return Promise.resolve(undefined);
              }).then(Curry.__1(next));
}

var Mongo = {
  key: key,
  setClient: setClient,
  getClient: getClient,
  middlewareAsync: middlewareAsync
};

function middlewareAsync$1(param, req, res, next) {
  var config = Server_Config.get(undefined);
  var options_password = config.session.cookiePassword;
  var options_cookieName = config.session.cookieName;
  var options_cookieOptions = {
    secure: Server_NodeEnv.isProduction(undefined)
  };
  var options = {
    password: options_password,
    cookieName: options_cookieName,
    cookieOptions: options_cookieOptions
  };
  return NextIronSession.applySession(req, res, options).then(Curry.__1(next));
}

var Session = {
  middlewareAsync: middlewareAsync$1
};

var userKey = "user";

var userIdKey = "userId";

function setUser(req, value) {
  return Server_Request.set(req, userKey, value);
}

function getUser(req) {
  return Server_Request.get(req, userKey);
}

function setUserId(req, value) {
  return Server_Request.set(req, userIdKey, value);
}

function getUserId(req) {
  return Server_Request.get(req, userIdKey);
}

function get(req) {
  var match = Server_Request.get(req, userIdKey);
  var match$1 = Server_Request.get(req, userKey);
  if (match !== undefined && match$1 !== undefined) {
    return [
            Caml_option.valFromOption(match),
            match$1
          ];
  }
  
}

function middlewareAsync$2(param, req, _res, next) {
  var userId = Server_Session.getUserId(req);
  var tmp;
  if (userId !== undefined) {
    var userId$1 = MongoDb.ObjectId.fromString(userId);
    if (userId$1.TAG === /* Ok */0) {
      var userId$2 = userId$1._0;
      tmp = Server_User.findUserByObjectId(req[key], userId$2).then(function (user) {
            Server_Request.set(req, userKey, user);
            Server_Request.set(req, userIdKey, Caml_option.some(userId$2));
            return Promise.resolve(undefined);
          });
    } else {
      tmp = Promise.resolve(undefined);
    }
  } else {
    Server_Request.set(req, userKey, undefined);
    Server_Request.set(req, userIdKey, undefined);
    tmp = Promise.resolve(undefined);
  }
  return tmp.then(Curry.__1(next));
}

var User = {
  userKey: userKey,
  userIdKey: userIdKey,
  setUser: setUser,
  getUser: getUser,
  setUserId: setUserId,
  getUserId: getUserId,
  get: get,
  middlewareAsync: middlewareAsync$2
};

function all(param) {
  return NextConnect().use(function (param, param$1, param$2) {
                  return middlewareAsync(undefined, param, param$1, param$2);
                }).use(function (param, param$1, param$2) {
                return middlewareAsync$1(undefined, param, param$1, param$2);
              }).use(function (param, param$1, param$2) {
              return middlewareAsync$2(undefined, param, param$1, param$2);
            });
}

function run(prim0, prim1, prim2) {
  return prim0.run(prim1, prim2);
}

function getRequestData(req) {
  var client = req[key];
  var user = Server_Request.get(req, userKey);
  var userId = Server_Request.get(req, userIdKey);
  var userIdString = Belt_Option.map(userId, MongoDb.ObjectId.toString);
  return {
          client: client,
          currentUserId: userId,
          currentUserIdString: userIdString,
          currentUser: user
        };
}

export {
  NextRequest ,
  Mongo ,
  Session ,
  User ,
  all ,
  run ,
  getRequestData ,
  
}
/* MongoDb Not a pure module */
