// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Bcrypt from "bcrypt";
import * as Nanoid from "nanoid";
import * as MongoDb from "../../bindings/MongoDb.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function getCollection(client) {
  var db = client.db();
  return db.collection("users");
}

function getStats(client) {
  return getCollection(client).stats();
}

function hashPassword(password) {
  return Bcrypt.genSalt(10).then(function (salt) {
              return Bcrypt.hash(password, salt);
            });
}

function comparePasswords(password, passwordHash) {
  return Bcrypt.compare(password, passwordHash);
}

function makeActivationKey(param) {
  return Curry._1(Nanoid.nanoid, undefined);
}

function makeResetPasswordKey(param) {
  return Curry._1(Nanoid.nanoid, undefined);
}

function makeEmailChangeKey(param) {
  return Curry._1(Nanoid.nanoid, undefined);
}

function signupToDbUser(signup) {
  var now = new Date();
  return hashPassword(signup.password).then(function (passwordHash) {
              return Promise.resolve({
                          _id: Curry._1(MongoDb.ObjectId.make, undefined),
                          email: signup.email,
                          emailVerified: false,
                          passwordHash: passwordHash,
                          created: now,
                          updated: now,
                          activationKey: Curry._1(Nanoid.nanoid, undefined),
                          isActivated: false,
                          resetPasswordKey: undefined,
                          resetPasswordExpiry: undefined
                        });
            });
}

function findUserByObjectId(client, objectId) {
  return getCollection(client).findOne({
                _id: objectId
              }).then(function (prim) {
              if (prim === undefined) {
                return ;
              } else {
                return Caml_option.some(prim);
              }
            });
}

function findUserById(client, userId) {
  var userId$1 = MongoDb.ObjectId.fromString(userId);
  if (userId$1.TAG === /* Ok */0) {
    return getCollection(client).findOne({
                  _id: userId$1._0
                }).then(function (prim) {
                if (prim === undefined) {
                  return ;
                } else {
                  return Caml_option.some(prim);
                }
              });
  } else {
    return Promise.resolve(undefined);
  }
}

function signupUser(client, signup) {
  return signupToDbUser(signup).then(function (dbUser) {
              return getCollection(client).insertOne(dbUser).then(function (insertResult) {
                          return findUserByObjectId(client, insertResult.insertedId);
                        });
            });
}

function findUserByEmail(client, email) {
  return getCollection(client).findOne({
                email: email
              }).then(function (prim) {
              if (prim === undefined) {
                return ;
              } else {
                return Caml_option.some(prim);
              }
            });
}

function updateUserPassword(client, userId, password) {
  var userId$1 = MongoDb.ObjectId.fromString(userId);
  if (userId$1.TAG === /* Ok */0) {
    return MongoDb.Collection.updateOneWithSet(getCollection(client), userId$1._0, {
                password: password
              });
  } else {
    return Js_exn.raiseError(userId$1._0);
  }
}

function updateEmailVerified(client, userId, emailVerified) {
  var userId$1 = MongoDb.ObjectId.fromString(userId);
  if (userId$1.TAG === /* Ok */0) {
    return MongoDb.Collection.updateOneWithSet(getCollection(client), userId$1._0, {
                emailVerified: emailVerified
              });
  } else {
    return Js_exn.raiseError(userId$1._0);
  }
}

export {
  getCollection ,
  getStats ,
  hashPassword ,
  comparePasswords ,
  makeActivationKey ,
  makeResetPasswordKey ,
  makeEmailChangeKey ,
  signupToDbUser ,
  findUserByObjectId ,
  findUserById ,
  signupUser ,
  findUserByEmail ,
  updateUserPassword ,
  updateEmailVerified ,
  
}
/* bcrypt Not a pure module */
