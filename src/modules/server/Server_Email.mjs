// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.mjs";
import * as Common_Url from "../common/Common_Url.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Server_Config from "./Server_Config.mjs";
import * as Mail from "@sendgrid/mail";

var applicationConfig = Server_Config.get(undefined).application;

var applicationName = applicationConfig.name;

var applicationUrl = applicationConfig.url;

function send(message) {
  var match = Server_Config.get(undefined);
  var apiKey = match.sendGrid.apiKey;
  if (apiKey !== undefined) {
    Mail.setApiKey(apiKey);
    return Mail.send(message);
  } else {
    return Promise.resolve(undefined);
  }
}

function makeEmailAddress(emailName, emailAddress) {
  return emailName + " <" + emailAddress + ">";
}

function makeUrl(path) {
  return applicationUrl + path;
}

function makeSubject(subject) {
  return applicationName + " " + subject;
}

function getApplicationEmail(param) {
  var match = Server_Config.get(undefined);
  var application = match.application;
  return makeEmailAddress(application.emailName, application.emailAddress);
}

function errorToString(error) {
  var name = Belt_Option.getWithDefault(error.name, "Unknown");
  var stack = Belt_Option.getWithDefault(error.stack, "Unknown");
  return [
            name,
            stack
          ].join("\n\n");
}

function unknownExnToString(exn) {
  var json;
  try {
    json = JSON.stringify(exn);
  }
  catch (exn$1){
    json = undefined;
  }
  if (json !== undefined) {
    return json;
  } else {
    return "Unknown";
  }
}

function exnToString(exn) {
  if (exn.RE_EXN_ID === $$Promise.JsError || exn.RE_EXN_ID === Js_exn.$$Error) {
    return errorToString(exn._1);
  } else {
    return unknownExnToString(exn);
  }
}

function sendExceptionEmail(userEmail, url, exn) {
  var email = Belt_Option.getWithDefault(userEmail, "Unknown");
  var time = "Time: " + new Date().toISOString();
  var user = "User: " + email;
  var url$1 = "URL: " + url;
  var exnText = exnToString(exn);
  var text = [
      time,
      user,
      url$1,
      exnText
    ].join("\n\n");
  return send({
              to: getApplicationEmail(undefined),
              from: getApplicationEmail(undefined),
              subject: applicationName + " Error",
              text: text
            });
}

function sendContactEmail(contact) {
  return send({
              to: getApplicationEmail(undefined),
              from: makeEmailAddress(contact.name, contact.email),
              subject: applicationName + " " + "Contact",
              text: contact.message
            });
}

function sendActivationEmail(userId, userEmail, activationKey) {
  var url = applicationUrl + Common_Url.activate(userId, activationKey);
  var text = [
      "Thanks for signing up with " + applicationName + ".",
      "",
      "Please visit the following link to activate your account:",
      "",
      url,
      "",
      applicationName,
      applicationUrl
    ].join("\n");
  return send({
              to: userEmail,
              from: getApplicationEmail(undefined),
              subject: applicationName + " " + "Activation",
              text: text
            });
}

function sendForgotPasswordEmail(userId, userEmail, resetPasswordKey) {
  var url = applicationUrl + Common_Url.resetPassword(userId, resetPasswordKey);
  var text = [
      "We've received a request to reset your password.",
      "",
      "If you did not make this request, you can safely ignore this email.",
      "",
      "Otherwise, please visit the following link to reset your password.",
      "",
      url,
      "",
      applicationName,
      applicationUrl
    ].join("\n");
  return send({
              to: userEmail,
              from: getApplicationEmail(undefined),
              subject: applicationName + " " + "Reset Password",
              text: text
            });
}

function sendEmailChangeEmail(userId, userEmail, emailChangeKey) {
  var url = applicationUrl + Common_Url.changeEmailConfirm(userId, emailChangeKey);
  var text = [
      "We've received a request to change your email address.",
      "",
      "Please visit the following link to confirm your new email address.",
      "",
      url,
      "",
      applicationName,
      applicationUrl
    ].join("\n");
  return send({
              to: userEmail,
              from: getApplicationEmail(undefined),
              subject: applicationName + " " + "Confirm Change Email",
              text: text
            });
}

export {
  applicationConfig ,
  applicationName ,
  applicationUrl ,
  send ,
  makeEmailAddress ,
  makeUrl ,
  makeSubject ,
  getApplicationEmail ,
  errorToString ,
  unknownExnToString ,
  exnToString ,
  sendExceptionEmail ,
  sendContactEmail ,
  sendActivationEmail ,
  sendForgotPasswordEmail ,
  sendEmailChangeEmail ,
  
}
/* applicationConfig Not a pure module */
