// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$String from "rescript/lib/es6/string.js";
import * as Js_null from "rescript/lib/es6/js_null.js";
import * as Validator from "validator";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function toDto(user) {
  return {
          id: user.id,
          email: user.email,
          emailChange: Js_null.fromOption(user.emailChange)
        };
}

function fromDto(dto) {
  return {
          id: dto.id,
          email: dto.email,
          emailChange: Caml_option.null_to_opt(dto.emailChange)
        };
}

function fromNullDto(dto) {
  return Belt_Option.map(dto === null ? undefined : Caml_option.some(dto), fromDto);
}

var User = {
  toDto: toDto,
  fromDto: fromDto,
  fromNullDto: fromNullDto
};

function isValid(validation) {
  if (Belt_Option.isNone(validation.email) && Belt_Option.isNone(validation.password)) {
    return Belt_Option.isNone(validation.reCaptcha);
  } else {
    return false;
  }
}

function hasErrors(validation) {
  return !isValid(validation);
}

function validateEmail(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validatePassword(password) {
  if (Validator.isEmpty(password)) {
    return "PasswordEmpty";
  }
  
}

function validateReCaptcha(reCaptcha) {
  if (reCaptcha !== undefined) {
    return ;
  } else {
    return "ReCaptchaEmpty";
  }
}

function validateSignup(param) {
  return {
          email: validateEmail(param.email),
          password: validatePassword(param.password),
          reCaptcha: validateReCaptcha(param.reCaptcha)
        };
}

function signupErrorToString(error) {
  return "There was a problem signing up, please try again";
}

function emailErrorToString(error) {
  if (error === "EmailEmpty") {
    return "Enter an email address";
  } else if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "That email address is not available";
  }
}

function passwordErrorToString(error) {
  return "Enter a password";
}

function reCaptchaErrorToString(error) {
  return "Are you sure you're a robot?";
}

var Signup = {
  isValid: isValid,
  hasErrors: hasErrors,
  validateEmail: validateEmail,
  validatePassword: validatePassword,
  validateReCaptcha: validateReCaptcha,
  validateSignup: validateSignup,
  signupErrorToString: signupErrorToString,
  emailErrorToString: emailErrorToString,
  passwordErrorToString: passwordErrorToString,
  reCaptchaErrorToString: reCaptchaErrorToString
};

var isError = Belt_Option.isSome;

function validateEmail$1(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validateResendActivation(param) {
  return validateEmail$1(param.email);
}

function resendError(message) {
  return "There was a problem resending the activation email. " + message;
}

function resendActivationErrorToString(error) {
  if (error === "UserNotFound") {
    return "There was a problem resending the activation email. That email address was not found.";
  } else if (error === "AlreadyActivated") {
    return "There was a problem resending the activation email. Your account has already been activated.";
  } else if (error === "EmailEmpty" || error === "EmailInvalid") {
    return "There was a problem resending the activation email. Check the email below is a valid email address.";
  } else {
    return "There was a problem resending the activation email. Please try again.";
  }
}

var ResendActivation = {
  isError: isError,
  validateEmail: validateEmail$1,
  validateResendActivation: validateResendActivation,
  resendError: resendError,
  resendActivationErrorToString: resendActivationErrorToString
};

function hasErrors$1(errors) {
  if (Belt_Option.isSome(errors.login) || Belt_Option.isSome(errors.email)) {
    return true;
  } else {
    return Belt_Option.isSome(errors.password);
  }
}

function validateEmail$2(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validatePassword$1(password) {
  if (Validator.isEmpty(password)) {
    return "PasswordEmpty";
  }
  
}

function validateLogin(param) {
  return {
          login: undefined,
          email: validateEmail$2(param.email),
          password: validatePassword$1(param.password)
        };
}

function emailErrorToString$1(error) {
  if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "Enter your email address";
  }
}

function passwordErrorToString$1(error) {
  return "Enter a password";
}

var Login = {
  hasErrors: hasErrors$1,
  validateEmail: validateEmail$2,
  validatePassword: validatePassword$1,
  validateLogin: validateLogin,
  emailErrorToString: emailErrorToString$1,
  passwordErrorToString: passwordErrorToString$1
};

var Logout = {};

function hasErrors$2(errors) {
  if (Belt_Option.isSome(errors.changeEmail)) {
    return true;
  } else {
    return Belt_Option.isSome(errors.email);
  }
}

function validateEmail$3(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validateChangeEmail(param) {
  return {
          changeEmail: undefined,
          email: validateEmail$3(param.email)
        };
}

var generalError = "An error occurred when trying to change your email. Please try again.";

function changeEmailErrorToString(error) {
  if (error === "SameAsCurrentEmail") {
    return "The email address you provided is the same as your current email address.";
  } else if (error === "EmailNotAvailable") {
    return "That email address is not available.";
  } else {
    return generalError;
  }
}

function emailErrorToString$2(error) {
  if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "Enter an email address";
  }
}

var ChangeEmail = {
  hasErrors: hasErrors$2,
  validateEmail: validateEmail$3,
  validateChangeEmail: validateChangeEmail,
  generalError: generalError,
  changeEmailErrorToString: changeEmailErrorToString,
  emailErrorToString: emailErrorToString$2
};

function hasErrors$3(validation) {
  if (Belt_Option.isSome(validation.changePassword) || Belt_Option.isSome(validation.currentPassword) || Belt_Option.isSome(validation.newPassword)) {
    return true;
  } else {
    return Belt_Option.isSome(validation.newPasswordConfirm);
  }
}

function validateCurrentPassword(currentPassword) {
  if (Validator.isEmpty(currentPassword)) {
    return "CurrentPasswordEmpty";
  }
  
}

function validateNewPassword(newPassword) {
  if (Validator.isEmpty(newPassword)) {
    return "NewPasswordEmpty";
  }
  
}

function validateNewPasswordConfirm(newPassword, newPasswordConfirm) {
  if (Validator.isEmpty(newPasswordConfirm)) {
    return "NewPasswordConfirmEmpty";
  } else if (newPassword !== newPasswordConfirm) {
    return "NewPasswordConfirmMismatch";
  } else {
    return ;
  }
}

function validateChangePassword(param) {
  var newPassword = param.newPassword;
  return {
          changePassword: undefined,
          currentPassword: validateCurrentPassword(param.currentPassword),
          newPassword: validateNewPassword(newPassword),
          newPasswordConfirm: validateNewPasswordConfirm(newPassword, param.newPasswordConfirm)
        };
}

function changePasswordValidationErrorToString(error) {
  if (error === "UserNotFound" || error !== "CurrentPasswordInvalid") {
    return "An error occurred when trying to change your password. Please try again.";
  } else {
    return "The current password you entered is not correct. Please try again.";
  }
}

function currentPasswordValidationErrorToString(error) {
  return "Enter your current password";
}

function newPasswordValidationErrorToString(error) {
  return "Enter your new password";
}

function newPasswordConfirmValidationErrorToString(error) {
  if (error === "NewPasswordConfirmEmpty") {
    return "Re-enter your new password";
  } else {
    return "This does not match the password above";
  }
}

var ChangePassword = {
  hasErrors: hasErrors$3,
  validateCurrentPassword: validateCurrentPassword,
  validateNewPassword: validateNewPassword,
  validateNewPasswordConfirm: validateNewPasswordConfirm,
  validateChangePassword: validateChangePassword,
  changePasswordValidationErrorToString: changePasswordValidationErrorToString,
  currentPasswordValidationErrorToString: currentPasswordValidationErrorToString,
  newPasswordValidationErrorToString: newPasswordValidationErrorToString,
  newPasswordConfirmValidationErrorToString: newPasswordConfirmValidationErrorToString
};

function hasErrors$4(errors) {
  if (Belt_Option.isSome(errors.forgotPassword)) {
    return true;
  } else {
    return Belt_Option.isSome(errors.email);
  }
}

function validateEmail$4(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validateForgotPassword(forgotPassword) {
  return {
          forgotPassword: undefined,
          email: validateEmail$4(forgotPassword.email)
        };
}

function forgotPasswordErrorToString(error) {
  return "There was a problem processing your forgot password request. Please try again.";
}

function emailErrorToString$3(error) {
  if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "Enter an email address";
  }
}

var ForgotPassword = {
  hasErrors: hasErrors$4,
  validateEmail: validateEmail$4,
  validateForgotPassword: validateForgotPassword,
  forgotPasswordErrorToString: forgotPasswordErrorToString,
  emailErrorToString: emailErrorToString$3
};

function resetPasswordErrorsToDto(errors) {
  return {
          resetPassword: Js_null.fromOption(errors.resetPassword),
          password: Js_null.fromOption(errors.password),
          passwordConfirm: Js_null.fromOption(errors.passwordConfirm),
          reCaptcha: Js_null.fromOption(errors.reCaptcha)
        };
}

function dtoToResetPasswordErrors(errors) {
  return {
          resetPassword: Caml_option.null_to_opt(errors.resetPassword),
          password: Caml_option.null_to_opt(errors.password),
          passwordConfirm: Caml_option.null_to_opt(errors.passwordConfirm),
          reCaptcha: Caml_option.null_to_opt(errors.reCaptcha)
        };
}

function refineResetPasswordKeyError(error) {
  if (error === "ResetPasswordExpired") {
    return "ResetPasswordExpired";
  } else {
    return "ResetPasswordInvalid";
  }
}

function hasErrors$5(errors) {
  if (Belt_Option.isSome(errors.resetPassword) || Belt_Option.isSome(errors.password) || Belt_Option.isSome(errors.passwordConfirm)) {
    return true;
  } else {
    return Belt_Option.isSome(errors.reCaptcha);
  }
}

function validatePassword$2(password) {
  if (Validator.isEmpty(password)) {
    return "PasswordEmpty";
  }
  
}

function validatePasswordConfirm(password, passwordConfirm) {
  if (Validator.isEmpty(passwordConfirm)) {
    return "PasswordConfirmEmpty";
  } else if (password !== passwordConfirm) {
    return "PasswordConfirmMismatch";
  } else {
    return ;
  }
}

function validateReCaptcha$1(reCaptcha) {
  if (reCaptcha !== undefined) {
    return ;
  } else {
    return "ReCaptchaEmpty";
  }
}

function validateResetPassword(param) {
  var password = param.password;
  return {
          resetPassword: undefined,
          password: validatePassword$2(password),
          passwordConfirm: validatePasswordConfirm(password, param.passwordConfirm),
          reCaptcha: validateReCaptcha$1(param.reCaptcha)
        };
}

function resetPasswordErrorToString(error) {
  return "There was a problem resetting your password, please try again";
}

function passwordErrorToString$2(error) {
  return "Enter your new password";
}

function passwordConfirmErrorToString(error) {
  if (error === "PasswordConfirmEmpty") {
    return "Re-enter your new password";
  } else {
    return "This does not match the password above";
  }
}

function reCaptchaErrorToString$1(error) {
  return "Are you sure you're a robot?";
}

var ResetPassword = {
  resetPasswordErrorsToDto: resetPasswordErrorsToDto,
  dtoToResetPasswordErrors: dtoToResetPasswordErrors,
  refineResetPasswordKeyError: refineResetPasswordKeyError,
  hasErrors: hasErrors$5,
  validatePassword: validatePassword$2,
  validatePasswordConfirm: validatePasswordConfirm,
  validateReCaptcha: validateReCaptcha$1,
  validateResetPassword: validateResetPassword,
  resetPasswordErrorToString: resetPasswordErrorToString,
  passwordErrorToString: passwordErrorToString$2,
  passwordConfirmErrorToString: passwordConfirmErrorToString,
  reCaptchaErrorToString: reCaptchaErrorToString$1
};

export {
  User ,
  Signup ,
  ResendActivation ,
  Login ,
  Logout ,
  ChangeEmail ,
  ChangePassword ,
  ForgotPassword ,
  ResetPassword ,
  
}
/* validator Not a pure module */
