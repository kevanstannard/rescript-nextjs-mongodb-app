// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$String from "rescript/lib/es6/string.js";
import * as Validator from "validator";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

var User = {};

function isValid(validation) {
  if (Belt_Option.isNone(validation.email) && Belt_Option.isNone(validation.password)) {
    return Belt_Option.isNone(validation.reCaptcha);
  } else {
    return false;
  }
}

function hasErrors(validation) {
  return !isValid(validation);
}

function validateEmail(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validatePassword(password) {
  if (Validator.isEmpty(password)) {
    return "PasswordEmpty";
  }
  
}

function validateReCaptcha(reCaptcha) {
  if (reCaptcha !== undefined) {
    return ;
  } else {
    return "ReCaptchaEmpty";
  }
}

function validateSignup(param) {
  return {
          email: validateEmail(param.email),
          password: validatePassword(param.password),
          reCaptcha: validateReCaptcha(param.reCaptcha)
        };
}

function signupErrorToString(error) {
  return "There was a problem signing up, please try again";
}

function emailErrorToString(error) {
  if (error === "EmailEmpty") {
    return "Enter an email address";
  } else if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "That email address is not available";
  }
}

function passwordErrorToString(error) {
  return "Enter a password";
}

function reCaptchaErrorToString(error) {
  return "Are you sure you're a robot?";
}

var Signup = {
  isValid: isValid,
  hasErrors: hasErrors,
  validateEmail: validateEmail,
  validatePassword: validatePassword,
  validateReCaptcha: validateReCaptcha,
  validateSignup: validateSignup,
  signupErrorToString: signupErrorToString,
  emailErrorToString: emailErrorToString,
  passwordErrorToString: passwordErrorToString,
  reCaptchaErrorToString: reCaptchaErrorToString
};

function isValid$1(validation) {
  if (Belt_Option.isNone(validation.email)) {
    return Belt_Option.isNone(validation.password);
  } else {
    return false;
  }
}

function hasErrors$1(validation) {
  return !isValid$1(validation);
}

function validateEmail$1(email) {
  var emailTrimmed = $$String.trim(email);
  if (Validator.isEmpty(emailTrimmed)) {
    return "EmailEmpty";
  } else if (!Validator.isEmail(emailTrimmed)) {
    return "EmailInvalid";
  } else {
    return ;
  }
}

function validatePassword$1(password) {
  if (Validator.isEmpty(password)) {
    return "PasswordEmpty";
  }
  
}

function validateLogin(param) {
  return {
          email: validateEmail$1(param.email),
          password: validatePassword$1(param.password)
        };
}

function loginErrorToString(error) {
  if (error === "RequestFailed") {
    return "There was a problem logging in, please try again.";
  } else if (error === "LoginFailed") {
    return "Your email or password is not correct.";
  } else if (error === "AccountInactive") {
    return "Your account has not been activated.";
  } else {
    return "There was a problem logging in, please try again.";
  }
}

function emailErrorToString$1(error) {
  if (error === "EmailInvalid") {
    return "Enter a valid email address";
  } else {
    return "Enter your email address";
  }
}

function passwordErrorToString$1(error) {
  return "Enter a password";
}

var Login = {
  isValid: isValid$1,
  hasErrors: hasErrors$1,
  validateEmail: validateEmail$1,
  validatePassword: validatePassword$1,
  validateLogin: validateLogin,
  loginErrorToString: loginErrorToString,
  emailErrorToString: emailErrorToString$1,
  passwordErrorToString: passwordErrorToString$1
};

var Logout = {};

export {
  User ,
  Signup ,
  Login ,
  Logout ,
  
}
/* validator Not a pure module */
