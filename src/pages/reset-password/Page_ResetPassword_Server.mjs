// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Common_User from "../../modules/common/Common_User.mjs";
import * as Server_User from "../../modules/server/Server_User.mjs";
import * as Server_Config from "../../modules/server/Server_Config.mjs";
import * as Server_Middleware from "../../modules/server/Server_Middleware.mjs";

function makeResult(context) {
  var params = context.params;
  var match = Server_Middleware.getRequestData(context.req);
  var resetPasswordKey = params.resetPasswordKey;
  var userId = params.userId;
  var clientConfig = Server_Config.getClientConfig(undefined);
  var currentUserDto = Belt_Option.map(match.currentUser, Server_User.toCommonUserDto);
  var currentUserDto$1 = currentUserDto !== undefined ? currentUserDto : null;
  return Server_User.validateResetPasswordKey(match.client, userId, resetPasswordKey).then(function (validationResult) {
              var resetPasswordErrors;
              if (validationResult.TAG === /* Ok */0) {
                resetPasswordErrors = {
                  resetPassword: undefined,
                  password: undefined,
                  passwordConfirm: undefined,
                  reCaptcha: undefined
                };
              } else {
                var resetPasswordError = Common_User.ResetPassword.refineResetPasswordKeyError(validationResult._0);
                resetPasswordErrors = {
                  resetPassword: resetPasswordError,
                  password: undefined,
                  passwordConfirm: undefined,
                  reCaptcha: undefined
                };
              }
              var props_resetPasswordErrorsDto = Common_User.ResetPassword.resetPasswordErrorsToDto(resetPasswordErrors);
              var props = {
                config: clientConfig,
                userDto: currentUserDto$1,
                userId: userId,
                resetPasswordKey: resetPasswordKey,
                resetPasswordErrorsDto: props_resetPasswordErrorsDto
              };
              return Promise.resolve({
                          props: props,
                          redirect: undefined,
                          notFound: undefined
                        });
            });
}

function getServerSideProps(context) {
  return Server_Middleware.run(Server_Middleware.all(undefined), context.req, context.res).then(function (param) {
              return makeResult(context);
            });
}

export {
  makeResult ,
  getServerSideProps ,
  
}
/* Common_User Not a pure module */
