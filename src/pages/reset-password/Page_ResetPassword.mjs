// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Common_Url from "../../modules/common/Common_Url.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Client_User from "../../modules/client/Client_User.mjs";
import * as Common_User from "../../modules/common/Common_User.mjs";
import * as Router from "next/router";
import * as Page_ResetPassword_View from "./Page_ResetPassword_View.mjs";

function initialState(resetPasswordValidation) {
  return {
          password: "",
          passwordConfirm: "",
          reCaptcha: undefined,
          isSubmitting: false,
          errors: resetPasswordValidation
        };
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SetPassword */0 :
        return {
                password: action._0,
                passwordConfirm: state.passwordConfirm,
                reCaptcha: state.reCaptcha,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetPasswordConfirm */1 :
        return {
                password: state.password,
                passwordConfirm: action._0,
                reCaptcha: state.reCaptcha,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetReCaptcha */2 :
        return {
                password: state.password,
                passwordConfirm: state.passwordConfirm,
                reCaptcha: action._0,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetIsSubmitting */3 :
        return {
                password: state.password,
                passwordConfirm: state.passwordConfirm,
                reCaptcha: state.reCaptcha,
                isSubmitting: action._0,
                errors: state.errors
              };
    case /* SetErrors */4 :
        return {
                password: state.password,
                passwordConfirm: state.passwordConfirm,
                reCaptcha: state.reCaptcha,
                isSubmitting: state.isSubmitting,
                errors: action._0
              };
    
  }
}

function $$default(param) {
  var resetPasswordKey = param.resetPasswordKey;
  var userId = param.userId;
  var resetPasswordErrors = Common_User.ResetPassword.dtoToResetPasswordErrors(param.resetPasswordErrorsDto);
  var user = Common_User.User.fromNullDto(param.userDto);
  var match = React.useReducer(reducer, initialState(resetPasswordErrors));
  var dispatch = match[1];
  var state = match[0];
  var router = Router.useRouter();
  var onResetPasswordClick = function (param) {
    var resetPassword_password = state.password;
    var resetPassword_passwordConfirm = state.passwordConfirm;
    var resetPassword_reCaptcha = state.reCaptcha;
    var resetPassword = {
      userId: userId,
      resetPasswordKey: resetPasswordKey,
      password: resetPassword_password,
      passwordConfirm: resetPassword_passwordConfirm,
      reCaptcha: resetPassword_reCaptcha
    };
    var resetPasswordErrors = Common_User.ResetPassword.validateResetPassword(resetPassword);
    Curry._1(dispatch, {
          TAG: /* SetErrors */4,
          _0: resetPasswordErrors
        });
    if (Common_User.ResetPassword.hasErrors(resetPasswordErrors)) {
      return ;
    }
    Curry._1(dispatch, {
          TAG: /* SetIsSubmitting */3,
          _0: true
        });
    var onError = function (param) {
      Curry._1(dispatch, {
            TAG: /* SetErrors */4,
            _0: {
              resetPassword: "RequestFailed",
              password: undefined,
              passwordConfirm: undefined,
              reCaptcha: undefined
            }
          });
      return Curry._1(dispatch, {
                  TAG: /* SetIsSubmitting */3,
                  _0: false
                });
    };
    var onSuccess = function (json) {
      var match = json.result;
      if (match === "Error") {
        var errors = json.errors;
        var errors$1 = errors !== undefined ? errors : ({
              resetPassword: "UnknownError",
              password: undefined,
              passwordConfirm: undefined,
              reCaptcha: undefined
            });
        Curry._1(dispatch, {
              TAG: /* SetErrors */4,
              _0: errors$1
            });
        return Curry._1(dispatch, {
                    TAG: /* SetIsSubmitting */3,
                    _0: false
                  });
      }
      router.push(Common_Url.resetPasswordSuccess(undefined));
      
    };
    var resetPassword_password$1 = state.password;
    var resetPassword_passwordConfirm$1 = state.passwordConfirm;
    var resetPassword_reCaptcha$1 = state.reCaptcha;
    var resetPassword$1 = {
      userId: userId,
      resetPasswordKey: resetPasswordKey,
      password: resetPassword_password$1,
      passwordConfirm: resetPassword_passwordConfirm$1,
      reCaptcha: resetPassword_reCaptcha$1
    };
    Client_User.resetPassword(resetPassword$1, onSuccess, onError);
    
  };
  var resetPasswordError = state.errors.resetPassword;
  var passwordError = Belt_Option.map(state.errors.password, Common_User.ResetPassword.passwordErrorToString);
  var passwordConfirmError = Belt_Option.map(state.errors.passwordConfirm, Common_User.ResetPassword.passwordConfirmErrorToString);
  var reCaptchaError = Belt_Option.map(state.errors.reCaptcha, Common_User.ResetPassword.reCaptchaErrorToString);
  return React.createElement(Page_ResetPassword_View.make, {
              user: user,
              resetPasswordError: resetPasswordError,
              password: state.password,
              passwordConfirm: state.passwordConfirm,
              passwordError: passwordError,
              passwordConfirmError: passwordConfirmError,
              isSubmitting: state.isSubmitting,
              onPasswordChange: (function (password) {
                  return Curry._1(dispatch, {
                              TAG: /* SetPassword */0,
                              _0: password
                            });
                }),
              onPasswordConfirmChange: (function (passwordConfirm) {
                  return Curry._1(dispatch, {
                              TAG: /* SetPasswordConfirm */1,
                              _0: passwordConfirm
                            });
                }),
              onResetPasswordClick: onResetPasswordClick,
              reCaptchaSiteKey: param.config.reCaptcha.siteKey,
              onReCaptchaChange: (function (reCaptcha) {
                  return Curry._1(dispatch, {
                              TAG: /* SetReCaptcha */2,
                              _0: reCaptcha
                            });
                }),
              reCaptchaError: reCaptchaError
            });
}

export {
  initialState ,
  reducer ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
