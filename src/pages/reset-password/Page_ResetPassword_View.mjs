// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Common_Url from "../../modules/common/Common_Url.mjs";
import * as Layout_Main from "../../layouts/Layout_Main.mjs";
import * as Component_Form from "../../components/Component_Form.mjs";
import * as Component_Link from "../../components/Component_Link.mjs";
import * as Component_Title from "../../components/Component_Title.mjs";
import * as Component_Button from "../../components/Component_Button.mjs";
import * as Component_AlertMessage from "../../components/Component_AlertMessage.mjs";

function Page_ResetPassword_View$ErrorMessage(Props) {
  var error = Props.error;
  if (error !== undefined) {
    return React.createElement(Component_AlertMessage.make, {
                type_: "Error",
                children: error
              });
  } else {
    return null;
  }
}

var ErrorMessage = {
  make: Page_ResetPassword_View$ErrorMessage
};

function Page_ResetPassword_View$ResetPasswordError(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement(Component_Title.make, {
                  text: "Reset Password Error",
                  size: "Primary"
                }), React.createElement("p", {
                  className: "mb-4"
                }, "There is a problem with your Reset Password request."), React.createElement("p", {
                  className: "mb-4"
                }, React.createElement(Component_Link.make, {
                      href: Common_Url.forgotPassword(undefined),
                      children: "Try Forgot Password again"
                    })));
}

var ResetPasswordError = {
  make: Page_ResetPassword_View$ResetPasswordError
};

function Page_ResetPassword_View$ResetPasswordInvalid(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement(Component_Title.make, {
                  text: "Reset Password Invalid",
                  size: "Primary"
                }), React.createElement("p", {
                  className: "mb-4"
                }, "There is a problem with your Reset Password request."), React.createElement("p", {
                  className: "mb-4"
                }, React.createElement(Component_Link.make, {
                      href: Common_Url.forgotPassword(undefined),
                      children: "Try Forgot Password again"
                    })));
}

var ResetPasswordInvalid = {
  make: Page_ResetPassword_View$ResetPasswordInvalid
};

function Page_ResetPassword_View$ResetPasswordExpired(Props) {
  return React.createElement(React.Fragment, undefined, React.createElement(Component_Title.make, {
                  text: "Reset Password Expired",
                  size: "Primary"
                }), React.createElement("p", {
                  className: "mb-4"
                }, "The time available to reset your password has expired."), React.createElement("p", {
                  className: "mb-4"
                }, React.createElement(Component_Link.make, {
                      href: Common_Url.forgotPassword(undefined),
                      children: "Try Forgot Password again"
                    })));
}

var ResetPasswordExpired = {
  make: Page_ResetPassword_View$ResetPasswordExpired
};

function Page_ResetPassword_View$ResetPasswordForm(Props) {
  var password = Props.password;
  var passwordConfirm = Props.passwordConfirm;
  var reCaptchaSiteKey = Props.reCaptchaSiteKey;
  var onPasswordChange = Props.onPasswordChange;
  var onPasswordConfirmChange = Props.onPasswordConfirmChange;
  var onReCaptchaChange = Props.onReCaptchaChange;
  var passwordError = Props.passwordError;
  var passwordConfirmError = Props.passwordConfirmError;
  var reCaptchaError = Props.reCaptchaError;
  var onResetPasswordClick = Props.onResetPasswordClick;
  var isSubmitting = Props.isSubmitting;
  return React.createElement(Component_Form.FormContainer.make, {
              children: null
            }, React.createElement(Component_Title.make, {
                  text: "Reset Password",
                  size: "Primary"
                }), React.createElement(Component_Form.PasswordField.make, {
                  label: "New password",
                  value: password,
                  onChange: onPasswordChange,
                  error: passwordError,
                  showPasswordStrength: true
                }), React.createElement(Component_Form.PasswordField.make, {
                  label: "Confirm new password",
                  value: passwordConfirm,
                  onChange: onPasswordConfirmChange,
                  error: passwordConfirmError,
                  showPasswordStrength: false
                }), React.createElement(Component_Form.ReCaptchaField.make, {
                  reCaptchaSiteKey: reCaptchaSiteKey,
                  onChange: onReCaptchaChange,
                  error: reCaptchaError
                }), React.createElement("div", {
                  className: "mb-6"
                }, React.createElement(Component_Button.Button.make, {
                      state: isSubmitting ? "Processing" : "Ready",
                      onClick: onResetPasswordClick,
                      color: "Green",
                      full: true,
                      children: "Reset Password"
                    })));
}

var ResetPasswordForm = {
  make: Page_ResetPassword_View$ResetPasswordForm
};

function Page_ResetPassword_View(Props) {
  var user = Props.user;
  var resetPasswordError = Props.resetPasswordError;
  var password = Props.password;
  var passwordConfirm = Props.passwordConfirm;
  var passwordError = Props.passwordError;
  var passwordConfirmError = Props.passwordConfirmError;
  var isSubmitting = Props.isSubmitting;
  var onPasswordChange = Props.onPasswordChange;
  var onPasswordConfirmChange = Props.onPasswordConfirmChange;
  var onResetPasswordClick = Props.onResetPasswordClick;
  var reCaptchaSiteKey = Props.reCaptchaSiteKey;
  var onReCaptchaChange = Props.onReCaptchaChange;
  var reCaptchaError = Props.reCaptchaError;
  var body = resetPasswordError !== undefined ? (
      resetPasswordError === "RequestFailed" || resetPasswordError === "UnknownError" ? React.createElement(Page_ResetPassword_View$ResetPasswordError, {}) : (
          resetPasswordError === "ResetPasswordExpired" ? React.createElement(Page_ResetPassword_View$ResetPasswordExpired, {}) : React.createElement(Page_ResetPassword_View$ResetPasswordInvalid, {})
        )
    ) : React.createElement(Page_ResetPassword_View$ResetPasswordForm, {
          password: password,
          passwordConfirm: passwordConfirm,
          reCaptchaSiteKey: reCaptchaSiteKey,
          onPasswordChange: onPasswordChange,
          onPasswordConfirmChange: onPasswordConfirmChange,
          onReCaptchaChange: onReCaptchaChange,
          passwordError: passwordError,
          passwordConfirmError: passwordConfirmError,
          reCaptchaError: reCaptchaError,
          onResetPasswordClick: onResetPasswordClick,
          isSubmitting: isSubmitting
        });
  return React.createElement(Layout_Main.make, {
              user: user,
              children: body
            });
}

var Title;

var AlertMessage;

var Link;

var make = Page_ResetPassword_View;

export {
  Title ,
  AlertMessage ,
  Link ,
  ErrorMessage ,
  ResetPasswordError ,
  ResetPasswordInvalid ,
  ResetPasswordExpired ,
  ResetPasswordForm ,
  make ,
  
}
/* react Not a pure module */
