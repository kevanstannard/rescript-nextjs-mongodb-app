// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Common_Url from "../../modules/common/Common_Url.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Client_User from "../../modules/client/Client_User.mjs";
import * as Common_User from "../../modules/common/Common_User.mjs";
import * as Router from "next/router";
import * as Page_ChangePassword_View from "./Page_ChangePassword_View.mjs";

function initialState(param) {
  return {
          currentPassword: "",
          newPassword: "",
          newPasswordConfirm: "",
          isSubmitting: false,
          errors: {
            changePassword: undefined,
            currentPassword: undefined,
            newPassword: undefined,
            newPasswordConfirm: undefined
          }
        };
}

function reducer(state, action) {
  switch (action.TAG | 0) {
    case /* SetCurrentPassword */0 :
        return {
                currentPassword: action._0,
                newPassword: state.newPassword,
                newPasswordConfirm: state.newPasswordConfirm,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetNewPassword */1 :
        return {
                currentPassword: state.currentPassword,
                newPassword: action._0,
                newPasswordConfirm: state.newPasswordConfirm,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetNewPasswordConfirm */2 :
        return {
                currentPassword: state.currentPassword,
                newPassword: state.newPassword,
                newPasswordConfirm: action._0,
                isSubmitting: state.isSubmitting,
                errors: state.errors
              };
    case /* SetIsSubmitting */3 :
        return {
                currentPassword: state.currentPassword,
                newPassword: state.newPassword,
                newPasswordConfirm: state.newPasswordConfirm,
                isSubmitting: action._0,
                errors: state.errors
              };
    case /* SetErrors */4 :
        return {
                currentPassword: state.currentPassword,
                newPassword: state.newPassword,
                newPasswordConfirm: state.newPasswordConfirm,
                isSubmitting: state.isSubmitting,
                errors: action._0
              };
    
  }
}

function renderPage(user) {
  var match = React.useReducer(reducer, {
        currentPassword: "",
        newPassword: "",
        newPasswordConfirm: "",
        isSubmitting: false,
        errors: {
          changePassword: undefined,
          currentPassword: undefined,
          newPassword: undefined,
          newPasswordConfirm: undefined
        }
      });
  var dispatch = match[1];
  var state = match[0];
  var router = Router.useRouter();
  var onChangePasswordClick = function (param) {
    var changePassword_currentPassword = state.currentPassword;
    var changePassword_newPassword = state.newPassword;
    var changePassword_newPasswordConfirm = state.newPasswordConfirm;
    var changePassword = {
      currentPassword: changePassword_currentPassword,
      newPassword: changePassword_newPassword,
      newPasswordConfirm: changePassword_newPasswordConfirm
    };
    var errors = Common_User.ChangePassword.validateChangePassword(changePassword);
    Curry._1(dispatch, {
          TAG: /* SetErrors */4,
          _0: errors
        });
    if (Common_User.ChangePassword.hasErrors(errors)) {
      return ;
    }
    Curry._1(dispatch, {
          TAG: /* SetIsSubmitting */3,
          _0: true
        });
    var onError = function (param) {
      Curry._1(dispatch, {
            TAG: /* SetErrors */4,
            _0: {
              changePassword: "RequestFailed",
              currentPassword: undefined,
              newPassword: undefined,
              newPasswordConfirm: undefined
            }
          });
      return Curry._1(dispatch, {
                  TAG: /* SetIsSubmitting */3,
                  _0: false
                });
    };
    var onSuccess = function (json) {
      var errors = json.errors;
      if (Common_User.ChangePassword.hasErrors(errors)) {
        Curry._1(dispatch, {
              TAG: /* SetErrors */4,
              _0: errors
            });
        return Curry._1(dispatch, {
                    TAG: /* SetIsSubmitting */3,
                    _0: false
                  });
      } else {
        router.push(Common_Url.changePasswordSuccess(undefined));
        return ;
      }
    };
    Client_User.changePassword(changePassword, onSuccess, onError);
    
  };
  var changePasswordError = Belt_Option.map(state.errors.changePassword, Common_User.ChangePassword.changePasswordErrorToString);
  var currentPasswordError = Belt_Option.map(state.errors.currentPassword, Common_User.ChangePassword.currentPasswordErrorToString);
  var newPasswordError = Belt_Option.map(state.errors.newPassword, Common_User.ChangePassword.newPasswordErrorToString);
  var newPasswordConfirmError = Belt_Option.map(state.errors.newPasswordConfirm, Common_User.ChangePassword.newPasswordConfirmErrorToString);
  return React.createElement(Page_ChangePassword_View.make, {
              user: user,
              currentPassword: state.currentPassword,
              newPassword: state.newPassword,
              newPasswordConfirm: state.newPasswordConfirm,
              onCurrentPasswordChange: (function (currentPassword) {
                  return Curry._1(dispatch, {
                              TAG: /* SetCurrentPassword */0,
                              _0: currentPassword
                            });
                }),
              onNewPasswordChange: (function (newPassword) {
                  return Curry._1(dispatch, {
                              TAG: /* SetNewPassword */1,
                              _0: newPassword
                            });
                }),
              onNewPasswordConfirmChange: (function (newPasswordConfirm) {
                  return Curry._1(dispatch, {
                              TAG: /* SetNewPasswordConfirm */2,
                              _0: newPasswordConfirm
                            });
                }),
              onChangePasswordClick: onChangePasswordClick,
              isSubmitting: state.isSubmitting,
              changePasswordError: changePasswordError,
              currentPasswordError: currentPasswordError,
              newPasswordError: newPasswordError,
              newPasswordConfirmError: newPasswordConfirmError
            });
}

function $$default(param) {
  return renderPage(Common_User.User.fromDto(param.userDto));
}

export {
  initialState ,
  reducer ,
  renderPage ,
  $$default ,
  $$default as default,
  
}
/* react Not a pure module */
